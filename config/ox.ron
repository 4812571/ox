/*
    My very own (awesome) Ox configuration file!
    
    Ox uses RON. RON is an object notation similar to JSON.
    It makes it easy and quick for Ox to parse.

    Config name: NAME
    Author:      AUTHOR
    YEAR:        YEAR
*/

// General settings for Ox
(
    general: General(
        line_number_padding_right: 2, // Line number padding on the right
        line_number_padding_left:  1, // Line number padding on the left
        tab_width:                 4, // The amount of spaces for a tab
        undo_period:               5, // Seconds of inactivity for undo
    ),

    // RGB values for the colours of Ox
    theme: Theme(
        editor_bg:      (41, 41, 61), // The main background color
        editor_fg:      (255, 255, 255), // The default text color
        status_bg:      (59, 59, 84), // The background color of the status line
        status_fg:      (35, 240, 144), // The text color of the status line
        line_number_fg: (65, 65, 98), // The text color of the line numbers
    ),

    // Syntax highlighting definitions
    syntax: Syntax(
        // RGB colours of the syntax
        highlights: {
            "comments":   (113, 113, 169),
            "keywords":   (134, 76, 232),
            "strings":    (39, 222, 145),
            "characters": (40, 198, 232),
            "digits":     (40, 198, 232),
            "booleans":   (86, 217, 178),
            "functions":  (47, 141, 252),
            "structs":    (47, 141, 252),
            "macros":     (223, 52, 249),
            "attributes": (40, 198, 232),
        },
        // Definition of a language and their syntax
        languages: [
            Language(
                name: "Rust", // Name of the language
                icon: "îž¨ ", // Icon of the language
                extensions: ["rs"], // File extensions of the language
                // On the left is the name and the right is the expression(s) to use, 
                // These are arrays because you can use multiple regexes to highlight.
                definitions: {
                    "comments":   ["(//.*)$"], // Rust comments
                    "keywords":   ["\\b(pub)\\b", "\\b(const)\\b", "\\b(as)\\b", "\\b(break)", "\\b(continue)", "\\b(crate)\\b", "\\b(else)\\b", "\\b(enum)\\b", "\\b(extern)\\b", "\\b(fn)\\b", "\\b(for)\\b", "\\b(if)\\b", "\\b(impl)\\b", "\\b(in)\\b", "\\b(let)\\b", "\\b(loop)\\b", "\\b(match)\\b", "\\b(mod)\\b", "\\b(move)\\b", "\\b(mut)\\b", "\\b(ref)\\b", "\\b(return)\\b", "\\b(self)\\b", "\\b(Self)\\b", "\\b(static)\\b", "\\b(struct)\\b", "\\b(super)\\b", "\\b(trait)\\b", "\\b(type)\\b", "\\b(unsafe)\\b", "\\b(use)\\b", "\\b(where)\\b", "\\b(while)\\b", "\\b(async)\\b", "\\b(await)\\b", "\\b(dyn)\\b", "\\b('static)\\b"], // Keywords in the Rust language
                    "strings":    ["(\".*?\")"], // Strings
                    "characters": ["('.')"], // Characters
                    "digits":     ["(\\d+.\\d+|\\d+)"], // Digits
                    "booleans":   ["\\b(true)\\b", "\\b(false)\\b"], // Booleans
                    "functions":  ["\\b\\s+([a-z_]*)\\b\\("], // Function identifiers
                    "structs":    ["\\b([A-Z][A-Za-z_]*)\\b\\s*\\{"],
                    "macros":     ["\\b([a-z_][a-zA-Z_]*!)"],
                    "attributes": ["^\\s*(#\\[.*?\\])"]
                }
            ),
        ],
    )
)
